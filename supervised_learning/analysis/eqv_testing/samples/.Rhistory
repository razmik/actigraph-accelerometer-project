source("E:\Projects\test projects\R\start.R")
source("E:/Projects/test projects/R/start.R")
source("E:/Projects/test projects/R/start.R")
squares
dim(squares)
str(squares)
summary(squares)
?iris
q()
proj_folder = 'E:\University Documents\Lecture Notes\Predictive Analytics\R Workshop\R_Intro'
gsub('\','/', proj_folder)
fsdf
ad
)
''
'
gsub('\\','/', proj_folder)
proj_folder
gsub('\\','/', 'E:\University Documents\Lecture Notes\Predictive Analytics\R Workshop\R_Intro')
proj_folder = "E:\University Documents\Lecture Notes\Predictive Analytics\R Workshop\R_Intro"
proj_folder = "E:/University Document/Lecture Note/Predictive Analytics/R Workshop/R_Intro"
setwd(proj_folder)
setwd("E:/University Document/Lecture Note/Predictive Analytics/R Workshop/R_Intro")
tab = as.table(matrix(c(12, 33, 19,
38, 17, 31 ), nrow=2, byrow=TRUE))
tab
rownames(tab)        = c("PRIME", "PROTECT")
tab
colnames(tab) = c("RP", "EBRT", AS"")
colnames(tab) = c("RP", "EBRT", "AS")
tab
chisq.test(tab)
setwd("C:/Users/pc/Desktop/EquivalanceTesting")
# example 1.r:
# using functions in equivalence package
# Use install.packages('equivalence') to download the package
#   before first use
library(equivalence)
# calculations from summary statistics (group means and pooled sd)
# Note tost.stat() wants sd, not se
# mean from the meanvalues: 3.00446702 -	3.180920458
tost.stat(5.538484849-6.187575758, 0.19*sqrt(15), 110, Epsilon=0.15*5.538484849)
# arguments are the difference in group means, the pooled sd,
#   the sample size, and the +/- equivalence region
# using raw data
briskwalk <- read.csv('hlr_mvpa', as.is=T)
with(briskwalk, tost(freedson, hlr, epsilon=0.15*5.538484849, paired=T) )
# Or, doing calculations "by hand", using difference variable in the data set
Y <- briskwalk$diff
nDiff <- sum(!is.na(Y))  	# number of non-missing values
meanDiff <- mean(Y, na.rm=T)	# their average
seDiff <- sd(Y, na.rm=T) / sqrt(nDiff)	# and se
# biologically-motivated equivalence region for change from criterion
lower <- 0.15*5.538484849
upper <- 0.15*5.538484849
equivT1 <- (meanDiff + lower)/seDiff
equivT2 <- (meanDiff - upper)/seDiff;
PT1 <- pt(equivT1, nDiff-1, lower=F)
PT2 <- pt(equivT2, nDiff-1)
Pequiv <- max(PT1, PT2)
Pequiv
# example 1.r:
# using functions in equivalence package
# Use install.packages('equivalence') to download the package
#   before first use
library(equivalence)
# calculations from summary statistics (group means and pooled sd)
# Note tost.stat() wants sd, not se
# mean from the meanvalues: 3.00446702 -	3.180920458
tost.stat(5.538484849-6.187575758, 0.19*sqrt(15), 110, Epsilon=0.15*5.538484849)
# arguments are the difference in group means, the pooled sd,
#   the sample size, and the +/- equivalence region
# using raw data
briskwalk <- read.csv('hlr_mvpa.csv', as.is=T)
with(briskwalk, tost(freedson, hlr, epsilon=0.15*5.538484849, paired=T) )
# Or, doing calculations "by hand", using difference variable in the data set
Y <- briskwalk$diff
nDiff <- sum(!is.na(Y))  	# number of non-missing values
meanDiff <- mean(Y, na.rm=T)	# their average
seDiff <- sd(Y, na.rm=T) / sqrt(nDiff)	# and se
# biologically-motivated equivalence region for change from criterion
lower <- 0.15*5.538484849
upper <- 0.15*5.538484849
equivT1 <- (meanDiff + lower)/seDiff
equivT2 <- (meanDiff - upper)/seDiff;
PT1 <- pt(equivT1, nDiff-1, lower=F)
PT2 <- pt(equivT2, nDiff-1)
Pequiv <- max(PT1, PT2)
Pequiv
# example 1.r:
# using functions in equivalence package
# Use install.packages('equivalence') to download the package
#   before first use
library(equivalence)
# calculations from summary statistics (group means and pooled sd)
# Note tost.stat() wants sd, not se
# mean from the meanvalues: 3.00446702 -	3.180920458
tost.stat(5.538484849-6.187575758, 0.19*sqrt(25), 110, Epsilon=0.25*5.538484849)
# arguments are the difference in group means, the pooled sd,
#   the sample size, and the +/- equivalence region
# using raw data
briskwalk <- read.csv('hlr_mvpa.csv', as.is=T)
with(briskwalk, tost(freedson, hlr, epsilon=0.25*5.538484849, paired=T) )
# Or, doing calculations "by hand", using difference variable in the data set
Y <- briskwalk$diff
nDiff <- sum(!is.na(Y))  	# number of non-missing values
meanDiff <- mean(Y, na.rm=T)	# their average
seDiff <- sd(Y, na.rm=T) / sqrt(nDiff)	# and se
# biologically-motivated equivalence region for change from criterion
lower <- 0.25*5.538484849
upper <- 0.25*5.538484849
equivT1 <- (meanDiff + lower)/seDiff
equivT2 <- (meanDiff - upper)/seDiff;
PT1 <- pt(equivT1, nDiff-1, lower=F)
PT2 <- pt(equivT2, nDiff-1)
Pequiv <- max(PT1, PT2)
Pequiv
# example 1.r:
# using functions in equivalence package
# Use install.packages('equivalence') to download the package
#   before first use
library(equivalence)
# calculations from summary statistics (group means and pooled sd)
# Note tost.stat() wants sd, not se
# mean from the meanvalues: 3.00446702 -	3.180920458
tost.stat(5.538484849-6.187575758, 0.19*sqrt(20), 110, Epsilon=0.20*5.538484849)
# arguments are the difference in group means, the pooled sd,
#   the sample size, and the +/- equivalence region
# using raw data
briskwalk <- read.csv('hlr_mvpa.csv', as.is=T)
with(briskwalk, tost(freedson, hlr, epsilon=0.20*5.538484849, paired=T) )
# Or, doing calculations "by hand", using difference variable in the data set
Y <- briskwalk$diff
nDiff <- sum(!is.na(Y))  	# number of non-missing values
meanDiff <- mean(Y, na.rm=T)	# their average
seDiff <- sd(Y, na.rm=T) / sqrt(nDiff)	# and se
# biologically-motivated equivalence region for change from criterion
lower <- 0.20*5.538484849
upper <- 0.20*5.538484849
equivT1 <- (meanDiff + lower)/seDiff
equivT2 <- (meanDiff - upper)/seDiff;
PT1 <- pt(equivT1, nDiff-1, lower=F)
PT2 <- pt(equivT2, nDiff-1)
Pequiv <- max(PT1, PT2)
Pequiv
# example 1.r:
# using functions in equivalence package
# Use install.packages('equivalence') to download the package
#   before first use
library(equivalence)
# calculations from summary statistics (group means and pooled sd)
# Note tost.stat() wants sd, not se
# mean from the meanvalues: 3.00446702 -	3.180920458
tost.stat(5.538484849-49.00799242, 0.19*sqrt(20), 110, Epsilon=0.20*5.538484849)
# arguments are the difference in group means, the pooled sd,
#   the sample size, and the +/- equivalence region
# using raw data
briskwalk <- read.csv('stlr_mvpa.csv', as.is=T)
with(briskwalk, tost(freedson, st-lr, epsilon=0.20*5.538484849, paired=T) )
# Or, doing calculations "by hand", using difference variable in the data set
Y <- briskwalk$diff
nDiff <- sum(!is.na(Y))  	# number of non-missing values
meanDiff <- mean(Y, na.rm=T)	# their average
seDiff <- sd(Y, na.rm=T) / sqrt(nDiff)	# and se
# biologically-motivated equivalence region for change from criterion
lower <- 0.20*5.538484849
upper <- 0.20*5.538484849
equivT1 <- (meanDiff + lower)/seDiff
equivT2 <- (meanDiff - upper)/seDiff;
PT1 <- pt(equivT1, nDiff-1, lower=F)
PT2 <- pt(equivT2, nDiff-1)
Pequiv <- max(PT1, PT2)
Pequiv
# example 1.r:
# using functions in equivalence package
# Use install.packages('equivalence') to download the package
#   before first use
library(equivalence)
# calculations from summary statistics (group means and pooled sd)
# Note tost.stat() wants sd, not se
# mean from the meanvalues: 3.00446702 -	3.180920458
tost.stat(5.538484849-49.00799242, 0.19*sqrt(20), 110, Epsilon=0.20*5.538484849)
# arguments are the difference in group means, the pooled sd,
#   the sample size, and the +/- equivalence region
# using raw data
briskwalk <- read.csv('stlr_mvpa.csv', as.is=T)
with(briskwalk, tost(freedson, stlr, epsilon=0.20*5.538484849, paired=T) )
# Or, doing calculations "by hand", using difference variable in the data set
Y <- briskwalk$diff
nDiff <- sum(!is.na(Y))  	# number of non-missing values
meanDiff <- mean(Y, na.rm=T)	# their average
seDiff <- sd(Y, na.rm=T) / sqrt(nDiff)	# and se
# biologically-motivated equivalence region for change from criterion
lower <- 0.20*5.538484849
upper <- 0.20*5.538484849
equivT1 <- (meanDiff + lower)/seDiff
equivT2 <- (meanDiff - upper)/seDiff;
PT1 <- pt(equivT1, nDiff-1, lower=F)
PT2 <- pt(equivT2, nDiff-1)
Pequiv <- max(PT1, PT2)
Pequiv
# example 1.r:
# using functions in equivalence package
# Use install.packages('equivalence') to download the package
#   before first use
library(equivalence)
# calculations from summary statistics (group means and pooled sd)
# Note tost.stat() wants sd, not se
# mean from the meanvalues: 3.00446702 -	3.180920458
tost.stat(76.09469697-79.32484848, 0.19*sqrt(20), 110, Epsilon=0.20*76.09469697)
# arguments are the difference in group means, the pooled sd,
#   the sample size, and the +/- equivalence region
# using raw data
briskwalk <- read.csv('silr_sb.csv', as.is=T)
with(briskwalk, tost(freedson, silr, epsilon=0.20*76.09469697, paired=T) )
# Or, doing calculations "by hand", using difference variable in the data set
Y <- briskwalk$diff
nDiff <- sum(!is.na(Y))  	# number of non-missing values
meanDiff <- mean(Y, na.rm=T)	# their average
seDiff <- sd(Y, na.rm=T) / sqrt(nDiff)	# and se
# biologically-motivated equivalence region for change from criterion
lower <- 0.20*76.09469697
upper <- 0.20*76.09469697
equivT1 <- (meanDiff + lower)/seDiff
equivT2 <- (meanDiff - upper)/seDiff;
PT1 <- pt(equivT1, nDiff-1, lower=F)
PT2 <- pt(equivT2, nDiff-1)
Pequiv <- max(PT1, PT2)
Pequiv
# Example 3.r
# this code assumes no missing values.
#   if there are missing values, will need to modify the code
#   or pass the data set through na.omit() before doing the computations
allMarkers <- read.csv('Example 3.csv')
all.lm <- lm(surrogate ~ criterion, data=allMarkers)
# Robinson's original regression proposal
# confidence interval method is easy: just get 90% CI's
confint(all.lm, level=0.90)
# calculate variables to fit adjusted regression
allmean <- mean(allMarkers$criterion)
allMarkers$cSurrogate <- allMarkers$surrogate - allmean
allMarkers$cCriterion <- allMarkers$criterion - allmean
all.lm2 <- lm(cSurrogate ~ cCriterion, data=allMarkers)
# adjusted regression, so intercept is average surrogate
#  at average criterion
# confidence interval method is easy: just get 90% CI's
confint(all.lm2, level=0.90)
# compute two-one-sided-tests by writing out the computations
# extract sample size, estimates and their se's from the
#   regression fit
# illustrated with the adjusted regression
# since all quantities are vectors of length 2, can do
#   computations for intercept and slope at the same time
n <- dim(allMarkers)[1]
# here's one place where assume no missing values
ests <- coef(all.lm2)
ses <- sqrt(diag(vcov(all.lm2)))
# se's of the regression param are sqrt Variance
lower <- c(0.1*allmean, 0.9)
upper <- c(0.1*allmean, -1.1)
# lower and upper bounds for intercept and slope
Ta <- (ests - lower)/ses
Tb <- (ests + upper)/ses
Pa <- pt(Ta, n-2, lower=F)
Pb <- pt(Tb, n-2)
pmax(Pa, Pb)
# Equivalence p-values for intercept and slope separately
c(Pequiv=max(Pa, Pb))
# overall equivalence p-value = largest of the four component p-values
# R does not provide an easy way to fit a meta regression
# example 1.r:
# using functions in equivalence package
# Use install.packages('equivalence') to download the package
#   before first use
library(equivalence)
# calculations from summary statistics (group means and pooled sd)
# Note tost.stat() wants sd, not se
# mean from the meanvalues: 3.00446702 -	3.180920458
percentate = 0.18
tost.stat(3.037839877169385-3.184930938567715, 0.19*sqrt(percentate * 100), 110, Epsilon=percentate*3.037839877169385)
# arguments are the difference in group means, the pooled sd,
#   the sample size, and the +/- equivalence region
# using raw data
briskwalk <- read.csv('hilderbrand.csv', as.is=T)
with(briskwalk, tost(waist_ee_mean, predicted_ee_mean, epsilon=percentate*3.037839877169385, paired=T) )
# Or, doing calculations "by hand", using difference variable in the data set
Y <- briskwalk$realdiff_mean
nDiff <- sum(!is.na(Y))  	# number of non-missing values
meanDiff <- mean(Y, na.rm=T)	# their average
seDiff <- sd(Y, na.rm=T) / sqrt(nDiff)	# and se
# biologically-motivated equivalence region for change from criterion
lower <- percentate*3.037839877169385
upper <- percentate*3.037839877169385
equivT1 <- (meanDiff + lower)/seDiff
equivT2 <- (meanDiff - upper)/seDiff;
PT1 <- pt(equivT1, nDiff-1, lower=F)
PT2 <- pt(equivT2, nDiff-1)
Pequiv <- max(PT1, PT2)
Pequiv
# example 1.r:
# using functions in equivalence package
# Use install.packages('equivalence') to download the package
#   before first use
library(equivalence)
# calculations from summary statistics (group means and pooled sd)
# Note tost.stat() wants sd, not se
# mean from the meanvalues: 3.00446702 -	3.180920458
perc = 0.18
tost.stat(5.538484849-6.187575758, 0.19*sqrt(perc*100), 110, Epsilon=perc*5.538484849)
# arguments are the difference in group means, the pooled sd,
#   the sample size, and the +/- equivalence region
# using raw data
briskwalk <- read.csv('hlr_mvpa.csv', as.is=T)
with(briskwalk, tost(freedson, hlr, epsilon=perc*5.538484849, paired=T) )
# Or, doing calculations "by hand", using difference variable in the data set
Y <- briskwalk$diff
nDiff <- sum(!is.na(Y))  	# number of non-missing values
meanDiff <- mean(Y, na.rm=T)	# their average
seDiff <- sd(Y, na.rm=T) / sqrt(nDiff)	# and se
# biologically-motivated equivalence region for change from criterion
lower <- perc*5.538484849
upper <- perc*5.538484849
equivT1 <- (meanDiff + lower)/seDiff
equivT2 <- (meanDiff - upper)/seDiff;
PT1 <- pt(equivT1, nDiff-1, lower=F)
PT2 <- pt(equivT2, nDiff-1)
Pequiv <- max(PT1, PT2)
Pequiv
# example 1.r:
# using functions in equivalence package
# Use install.packages('equivalence') to download the package
#   before first use
library(equivalence)
# calculations from summary statistics (group means and pooled sd)
# Note tost.stat() wants sd, not se
# mean from the meanvalues: 3.00446702 -	3.180920458
perc = 0.19
tost.stat(5.538484849-6.187575758, 0.19*sqrt(perc*100), 110, Epsilon=perc*5.538484849)
# arguments are the difference in group means, the pooled sd,
#   the sample size, and the +/- equivalence region
# using raw data
briskwalk <- read.csv('hlr_mvpa.csv', as.is=T)
with(briskwalk, tost(freedson, hlr, epsilon=perc*5.538484849, paired=T) )
# Or, doing calculations "by hand", using difference variable in the data set
Y <- briskwalk$diff
nDiff <- sum(!is.na(Y))  	# number of non-missing values
meanDiff <- mean(Y, na.rm=T)	# their average
seDiff <- sd(Y, na.rm=T) / sqrt(nDiff)	# and se
# biologically-motivated equivalence region for change from criterion
lower <- perc*5.538484849
upper <- perc*5.538484849
equivT1 <- (meanDiff + lower)/seDiff
equivT2 <- (meanDiff - upper)/seDiff;
PT1 <- pt(equivT1, nDiff-1, lower=F)
PT2 <- pt(equivT2, nDiff-1)
Pequiv <- max(PT1, PT2)
Pequiv
tost.stat(5.538484849-6.187575758, 0.19*sqrt(perc*100), 110, Epsilon=perc*5.538484849)
# example 1.r:
# using functions in equivalence package
# Use install.packages('equivalence') to download the package
#   before first use
library(equivalence)
# calculations from summary statistics (group means and pooled sd)
# Note tost.stat() wants sd, not se
# mean from the meanvalues: 3.00446702 -	3.180920458
perc = 0.195
tost.stat(5.538484849-6.187575758, 0.19*sqrt(perc*100), 110, Epsilon=perc*5.538484849)
# arguments are the difference in group means, the pooled sd,
#   the sample size, and the +/- equivalence region
# using raw data
briskwalk <- read.csv('hlr_mvpa.csv', as.is=T)
with(briskwalk, tost(freedson, hlr, epsilon=perc*5.538484849, paired=T) )
# Or, doing calculations "by hand", using difference variable in the data set
Y <- briskwalk$diff
nDiff <- sum(!is.na(Y))  	# number of non-missing values
meanDiff <- mean(Y, na.rm=T)	# their average
seDiff <- sd(Y, na.rm=T) / sqrt(nDiff)	# and se
# biologically-motivated equivalence region for change from criterion
lower <- perc*5.538484849
upper <- perc*5.538484849
equivT1 <- (meanDiff + lower)/seDiff
equivT2 <- (meanDiff - upper)/seDiff;
PT1 <- pt(equivT1, nDiff-1, lower=F)
PT2 <- pt(equivT2, nDiff-1)
Pequiv <- max(PT1, PT2)
Pequiv
nDiff <- sum(!is.na(Y))  	# number of non-missing values
# example 1.r:
# using functions in equivalence package
# Use install.packages('equivalence') to download the package
#   before first use
library(equivalence)
# calculations from summary statistics (group means and pooled sd)
# Note tost.stat() wants sd, not se
# mean from the meanvalues: 3.00446702 -	3.180920458
perc = 0.1
tost.stat(76.09469697-79.32484848, 0.19*sqrt(perc*100), 110, Epsilon=perc*76.09469697)
# arguments are the difference in group means, the pooled sd,
#   the sample size, and the +/- equivalence region
# using raw data
briskwalk <- read.csv('silr_sb.csv', as.is=T)
with(briskwalk, tost(freedson, silr, epsilon=perc*76.09469697, paired=T) )
# Or, doing calculations "by hand", using difference variable in the data set
Y <- briskwalk$diff
nDiff <- sum(!is.na(Y))  	# number of non-missing values
meanDiff <- mean(Y, na.rm=T)	# their average
seDiff <- sd(Y, na.rm=T) / sqrt(nDiff)	# and se
# biologically-motivated equivalence region for change from criterion
lower <- perc*76.09469697
upper <- perc*76.09469697
equivT1 <- (meanDiff + lower)/seDiff
equivT2 <- (meanDiff - upper)/seDiff;
PT1 <- pt(equivT1, nDiff-1, lower=F)
PT2 <- pt(equivT2, nDiff-1)
Pequiv <- max(PT1, PT2)
Pequiv
# example 1.r:
# using functions in equivalence package
# Use install.packages('equivalence') to download the package
#   before first use
library(equivalence)
# calculations from summary statistics (group means and pooled sd)
# Note tost.stat() wants sd, not se
# mean from the meanvalues: 3.00446702 -	3.180920458
perc = 0.05
tost.stat(76.09469697-79.32484848, 0.19*sqrt(perc*100), 110, Epsilon=perc*76.09469697)
# arguments are the difference in group means, the pooled sd,
#   the sample size, and the +/- equivalence region
# using raw data
briskwalk <- read.csv('silr_sb.csv', as.is=T)
with(briskwalk, tost(freedson, silr, epsilon=perc*76.09469697, paired=T) )
# Or, doing calculations "by hand", using difference variable in the data set
Y <- briskwalk$diff
nDiff <- sum(!is.na(Y))  	# number of non-missing values
meanDiff <- mean(Y, na.rm=T)	# their average
seDiff <- sd(Y, na.rm=T) / sqrt(nDiff)	# and se
# biologically-motivated equivalence region for change from criterion
lower <- perc*76.09469697
upper <- perc*76.09469697
equivT1 <- (meanDiff + lower)/seDiff
equivT2 <- (meanDiff - upper)/seDiff;
PT1 <- pt(equivT1, nDiff-1, lower=F)
PT2 <- pt(equivT2, nDiff-1)
Pequiv <- max(PT1, PT2)
Pequiv
